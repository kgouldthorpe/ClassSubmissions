require("splitstackshape")
install.packages("splitslackshape")
require ("fivethirtyeight")
install.packages("splitstackshape")
install.packages("tidyverse")
install.packages("reshape2")
install.packages("devtools")
install.packages("plotly")
install.packages("crosstalk")
install.packages("DT")
install.packages("fivethirtyeight")
install.packages("fivethirtyeight")
load("~/GitHub/ClassSubmissions/Classwork/18-R/1/Activities/01_Ins_RBasics/Solved/.RData")
print(squared_vector)
# A list, unlike a vector, can contain various data types
random_list <- list("movies"=c("Star Wars", "Titanic", "Avatar"),
"states"=c("California", "Oklahoma", "Texas", "Virginia"),
"coins"=c("penny", "dime", "nickel", "quarter"),
"first_presidents"=presidents,
"nums"=c(1,2,3,4,5),
"bools"=c(T,F,T,T,T,F)
)
# We can use the bracket notation to access an item in a list:
random_list["states"]
# Or use the $ sign
random_list$coins
# Verify type
typeof(random_list)
# We can use the bracket notation to access an item in a list:
random_list["states"[2]]
# We can use the bracket notation to access an item in a list:
random_list["states"(2)]
# Or use the $ sign
random_list$coins[1]
namesof(random_list)
names(random_list)
# Numeric
a <- 3
b <- 3.1415
# Character
c <- "This is a string"
d <- "Yet another string"
# Boolean
e <- TRUE
f <- FALSE
g <- T
h <- F
# A vector is a basic unit of data structure in R
# All elements in a vector must be of the same type
disney_characters <- c("mickey", "minnie", "donald", "goofy")
presidents <- c("washington", "adams", "jefferson")
numbers_vector <- c(1, 3, 5, 7, 9, 11)
print(disney_characters)
print(presidents)
print(numbers_vector)
# R is a one-index language!
presidents[1]
### Combine vectors into a single vector
combined_vector <- c(disney_characters, presidents)
combined_vector
### A for-loop
print(x)
# Operate over an entire vector en masse
numeric_vector <- 1:length(combined_vector)
squared_vector <- numeric_vector**2
print(combined_vector)
attendance<-c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
print (Sys.Date(),x)
# Create function to print list with date
print_attendance <- function (list){
for x in attendance
print (Sys.Date(),x)
}
return list
# Create function to print list with date
print_attendance <- function (list){
print(Sys.Date())
for x in attendance {
print(x)
}
}
# Create function to print list with date
print_attendance <- function (list){
print(Sys.Date())
for (x in attendance) {
print(x)
}
}
print(attendance)
print(print_attendance)
print_attendance(attendance)
# Create locker combos
locker_combo<-function(list){
for (x in list){
combination<-(33,3)
print(x)
print(combination)
}
}
# Create locker combos
locker_combo<-function(list){
for (x in list){
combination<-sample(33,3)
print(x)
print(combination)
}
}
locker_combo(attendance)
# Simple vectors
# Months of the year
months <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Average rainfall/precipitation in NYC during each month
precipitation <- c(3.9, 2.9, 4.1, 3.9, 4.5, 3.5, 4.5, 4.1, 4.0, 3.4, 3.8, 3.6)
print(months)
print(precipitation)
# Assign names to a vector
# Assign months to precipitation as names
names(precipitation) <- months
# Display precipitation
print(precipitation)
# Display names of precipitation
print(names(precipitation))
# Access a single member of precipitation by its name
mar_precipitation <- precipitation["Mar"]
print(mar_precipitation)
# Summary of data
# Display summary data of precipitation
summary(precipitation)
precipitation_summary <- summary(precipitation)
# Access features of a summary
precipitation_summary["Min."]
precipitation_summary["Mean"]
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
require(dplyr)
install.packages(dplyr)
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
# Use pipe operators to express a sequence of operations
precipitation %>% summary()
---
title: "tibbles"
output: html_document
---
```{r setup, include=FALSE}
---
title: "tibbles"
output: html_document
---
data(diamonds, package='ggplot2')
install.packages("tidyverse")
install.packages(c("splitstackshape", "reshape2", "devtools", "plotly", "crosstalk", "DT", "fivethirtyeight", "ggplot2"))
---
title: "tibbles"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
### Load dependency and sample data set
```{r}
library(tidyverse)
data(diamonds, package='ggplot2')
```
---
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(tidyverse)
data(students, package='ggplot2')
library(tidyverse)
data(students, package='ggplot2')
setwd("~/GitHub/ClassSubmissions/Classwork/18-R/1/Activities/06_Stu_Tibble/Resources")
library(tidyverse)
data(students, package='ggplot2')
knitr::opts_chunk$set(echo = TRUE)
```{r}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(students.csv, package='ggplot2')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data(students.csv, package='ggplot2')
library(tidyverse)
data(students, package='ggplot2')
setwd("~/GitHub/ClassSubmissions/Classwork/18-R/1/Activities/06_Stu_Tibble/Resources")
library(tidyverse)
data(students, package='ggplot2')
library(readr)
students <- read_csv("students.csv")
View(students)
library(tidyverse)
data(students, package='ggplot2')
library(tidyverse)
data(students, package='ggplot2')
library(tidyverse)
data("students", package='ggplot2')
library(tidyverse)
data("students", package='ggplot2')
library(tidyverse)
data(students, package='ggplot2')
setwd("~/GitHub/ClassSubmissions/Classwork/18-R/1/Activities/06_Stu_Tibble/Resources")
library(tidyverse)
data(students, package='ggplot2')
library(tidyverse)
setwd(C:\Users\kenda\OneDrive\Documents\GitHub\ClassSubmissions\Classwork\18-R\1\Activities\06_Stu_Tibble\Resources)
library(tidyverse)
setwd("C:\Users\kenda\OneDrive\Documents\GitHub\ClassSubmissions\Classwork\18-R\1\Activities\06_Stu_Tibble\Resources")
setwd("C:\\Users\kenda\OneDrive\Documents\GitHub\ClassSubmissions\Classwork\18-R\1\Activities\06_Stu_Tibble\Resources")
library(tidyverse)
setwd("C:\\Users\\kenda\\OneDrive\\Documents\\GitHub\\ClassSubmissions\\Classwork\\18-R\\1\\Activities\\06_Stu_Tibble\\Resources")
data(students, package='ggplot2')
library(tidyverse)
setwd("C:\\Users\\kenda\\OneDrive\\Documents\\GitHub\\ClassSubmissions\\Classwork\\18-R\\1\\Activities\\06_Stu_Tibble\\Resources")
data("students.csv", package='ggplot2')
library(tidyverse)
setwd("C:\\Users\\kenda\\OneDrive\\Documents\\GitHub\\ClassSubmissions\\Classwork\\18-R\\1\\Activities\\06_Stu_Tibble\\Resources")
data("students.csv", package='ggplot2')
library(tidyverse)
setwd("C:\\Users\\kenda\\OneDrive\\Documents\\GitHub\\ClassSubmissions\\Classwork\\18-R\\1\\Activities\\06_Stu_Tibble\\Unsolved")
data("students.csv", package='ggplot2')
library(tidyverse)
setwd("C:\\Users\\kenda\\OneDrive\\Documents\\GitHub\\ClassSubmissions\\Classwork\\18-R\\1\\Activities\\06_Stu_Tibble\\Unsolved")
data("students.csv", package='ggplot2')
data(students.csv, package='ggplot2')
data('students.csv', package='ggplot2')
data(file='students.csv', package='ggplot2')
?data()
data(file='students.csv', package='ggplot2')
?data()
read_csv(file='students.csv', package='ggplot2')
?data()
read_csv(file='students.csv', header=TRUE)
?data()
read_csv(file='students.csv')
read_csv(file='students.csv')
students<-read_csv(file='students.csv')
head(students)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
ufos<-read_csv(ufo)
setwd("~/GitHub/ClassSubmissions/Classwork/18-R/2/Activities/01-Stu_UFO/Unsolved")
ufos<-read_csv(ufo)
setwd("C:\\Users\\kenda\\OneDrive\\Documents\\GitHub\\ClassSubmissions\\Classwork\\18-R\\2\\Activities\\01-Stu_UFO\\Unsolved")
ufos<-read_csv(ufo)
ufos<-read_csv("ufo.csv")
ufos<-read_csv("ufo.csv")
head(ufos)
ufo_sightings<-count(datetime)
ufo_sightings<-nrow(ufos)
locations<-unique(state)
locations<-unique(ufos, state)
locations<-unique(ufos$state)
location_count<-length(locations)
duration<-summarize(ufos, mean(duration))
duration<-summarize(ufos, mean(duration (seconds)))
mean_duration<-mean(ufos$duration (seconds))
mean_duration<-mean(ufos$duration)
mean_duration<-mean(ufos$duration(seconds))
mean_duration<-mean(ufos$'duration (seconds)')
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
horse_cart<-
tibble(
Name = c("Geroge",
"Martha",
"John",
"Abigail"),
Age = c(12,
11,
10,
7),
Years.Left = 25-Age
)
brand_research<-
tribble(
~Brand, ~Least.Reliable.Model, ~Average.Reliability.Score,
"Ford", "Focus", 65,
"Dodge", "RAM", 70,
"Hyundai", "Sonata",85
)
add_row(brand_research, Brand="Mazda", Least.Reliable.Model="CX-7", Average.Relibility.Score=78)
add_row(brand_research, Brand="Mazda", Least.Reliable.Model="CX-7", Average.Reliability.Score=78)
add_column(horse_cart, Name = "Steve", Age = 15)
add_column(horse_cart, "Steve", 15)
add_column(horse_cart, Money.Saved=c("Y", "N", "Y","N"))
brand_research_2<-(,c(2,1,3))
brand_research_2<-brand_research(,c(2,1,3))
brand_research_2<-brand_research[,c(2,1,3)]
brand_research_2<-brand_research[,c(2,1,3)]
head(brand_research_2)
brand_research<-add_row(brand_research, Brand="Mazda", Least.Reliable.Model="CX-7", Average.Reliability.Score=78)
brand_research<-add_row(brand_research, Brand="Mazda", Least.Reliable.Model="CX-7", Average.Reliability.Score=78)
brand_research_2<-brand_research[,c(2,1,3)]
head(brand_research_2)
